rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to check.
     * @return {boolean} - True if the user is the owner.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId - The user ID to check.
     * @return {boolean} - True if the user is the owner and resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the 'employees' collection.
     * @path /databases/{database}/documents/employees/{employeeId}
     * @allow (get, list) - Any authenticated user can read employee data.
     * @deny (create, update, delete) - No write operations are allowed in this prototype.
     * @principle Grants read access to all authenticated users but restricts all write access.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the 'time_entries' collection.
     * @path /databases/{database}/documents/time_entries/{timeEntryId}
     * @allow (create) - Any authenticated user can create a time entry.
     * @allow (get, list) - Any authenticated user can read time entries.
     * @deny (update, delete) - No update or delete operations are allowed in this prototype.
     * @principle Grants read access to all authenticated users and allows creation.
     */
    match /time_entries/{timeEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the 'piecework' collection.
     * @path /databases/{database}/documents/piecework/{pieceworkId}
     * @allow (create) - Any authenticated user can create a piecework record.
     * @allow (get, list) - Any authenticated user can read piecework records.
     * @deny (update, delete) - No update or delete operations are allowed in this prototype.
     * @principle Grants read access to all authenticated users and allows creation.
     */
    match /piecework/{pieceworkId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the 'clients' collection.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow (get, list) - Any authenticated user can read client data.
     * @deny (create, update, delete) - No write operations are allowed in this prototype.
     * @principle Grants read access to all authenticated users but restricts all write access.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the 'tasks' collection.
     * @path /databases/{database}/documents/tasks/{taskId}
     * @allow (get, list) - Any authenticated user can read task data.
     * @deny (create, update, delete) - No write operations are allowed in this prototype.
     * @principle Grants read access to all authenticated users but restricts all write access.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}