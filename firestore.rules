/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information.
 * - /tasks/{taskId}: Stores task information.
 * - /employees/{employeeId}: Stores employee information.
 * - /time_entries/{timeEntryId}: Stores time entry records.
 * - /piecework/{pieceworkId}: Stores piecework records.
 *
 * Key Security Decisions:
 * - Authenticated users can read any data.
 * - Only admins can create, update, or delete client, task, and employee data.
 * - All authenticated users can create, update, and delete time_entries and piecework data.
 * - No validation of data types or required fields is performed in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read client data, but only admins can create, update, or delete.
     * @path /clients/{clientId}
     * @allow (get, list): if true;
     * @allow (create): if false; // TODO: Implement admin role check
     * @allow (update): if false; // TODO: Implement admin role check
     * @allow (delete): if false; // TODO: Implement admin role check
     * @deny (create): if true; // Missing or insufficient permissions.
     * @principle Role-based access control, enforcing admin-only writes for client data.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Allows authenticated users to read task data, but only admins can create, update, or delete.
     * @path /tasks/{taskId}
     * @allow (get, list): if true;
     * @allow (create): if false; // TODO: Implement admin role check
     * @allow (update): if false; // TODO: Implement admin role check
     * @allow (delete): if false; // TODO: Implement admin role check
     * @principle Role-based access control, enforcing admin-only writes for task data.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Allows authenticated users to read employee data, but only admins can create, update, or delete.
     * @path /employees/{employeeId}
     * @allow (get, list): if true;
     * @allow (create): if false; // TODO: Implement admin role check
     * @allow (update): if false; // TODO: Implement admin role check
     * @allow (delete): if false; // TODO: Implement admin role check
     * @principle Role-based access control, enforcing admin-only writes for employee data.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete time entry records.
     * @path /time_entries/{timeEntryId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update): if isSignedIn();
     * @allow (delete): if isSignedIn();
     * @principle Authenticated users can manage their own time entry data.
     */
    match /time_entries/{timeEntryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete piecework records.
     * @path /piecework/{pieceworkId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn();
     * @allow (update): if isSignedIn();
     * @allow (delete): if isSignedIn();
     * @principle Authenticated users can manage their own piecework data.
     */
    match /piecework/{pieceworkId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}