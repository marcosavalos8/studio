/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the 'employees', 'clients', and 'tasks' collections,
 *              and an ownership model for data nested under `/users/{userId}`.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee data, managed by admins.
 * - /users/{userId}/time_entries/{timeEntryId}: Stores time entries, accessible only by the owning user or admins.
 * - /users/{userId}/piecework/{pieceworkId}: Stores piecework data, accessible only by the owning user or admins.
 * - /clients/{clientId}: Stores client data, managed by admins.
 * - /tasks/{taskId}: Stores task data, managed by admins.
 *
 * Key Security Decisions:
 * - Only authenticated users can access the database.
 * - Listing of employee, client, and task data is allowed.
 * - User listing is not allowed.
 * - Strict ownership is enforced for time entries and piecework data. Only the owner (or an admin, if roles were implemented) can read or write.
 * - Role-based access control is used for employee, client, and task management. An "admin" role (not implemented here but assumed) would be required for create, update, and delete operations.
 * - All write operations require the document to exist (for updates and deletes) to prevent accidental data loss.
 *
 * Denormalization for Authorization:
 * - This ruleset avoids `get()` calls by assuming an "admin" role can be determined without needing to read a separate document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Manages the rules for the 'employees' collection. Only allows creation by authorized users.
     * @path /employees/{employeeId}
     * @allow (create) - An admin user can create a new employee.
     * @allow (get, list) - Any authenticated user can read employee data.
     * @deny (create) - A non-admin user cannot create an employee.
     * @deny (update, delete) - Non-admin users cannot modify employee data.
     * @principle Enforces role-based access control; an admin role is required for employee management.
     */
    match /employees/{employeeId} {
      // Allow anyone to read employee data
      allow get, list: if isSignedIn();

      // Only allow create, update, delete if the user is an admin
      // TODO: Implement admin role check
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Manages the rules for the 'time_entries' subcollection under a user.
     * @path /users/{userId}/time_entries/{timeEntryId}
     * @allow (create) - The owner can create a time entry for themselves.
     * @allow (get, list) - The owner can read their own time entries.
     * @deny (create) - A user cannot create a time entry for another user.
     * @deny (update, delete) - A non-owner cannot modify or delete time entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/time_entries/{timeEntryId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Manages the rules for the 'piecework' subcollection under a user.
     * @path /users/{userId}/piecework/{pieceworkId}
     * @allow (create) - The owner can create a piecework record for themselves.
     * @allow (get, list) - The owner can read their own piecework records.
     * @deny (create) - A user cannot create a piecework record for another user.
     * @deny (update, delete) - A non-owner cannot modify or delete piecework records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/piecework/{pieceworkId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Manages the rules for the 'clients' collection.  Only allows creation by authorized users.
     * @path /clients/{clientId}
     * @allow (create) - An admin user can create a new client.
     * @allow (get, list) - Any authenticated user can read client data.
     * @deny (create) - A non-admin user cannot create a client.
     * @deny (update, delete) - Non-admin users cannot modify client data.
     * @principle Enforces role-based access control; an admin role is required for client management.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Manages the rules for the 'tasks' collection.  Only allows creation by authorized users.
     * @path /tasks/{taskId}
     * @allow (create) - An admin user can create a new task.
     * @allow (get, list) - Any authenticated user can read task data.
     * @deny (create) - A non-admin user cannot create a task.
     * @deny (update, delete) - Non-admin users cannot modify task data.
     * @principle Enforces role-based access control; an admin role is required for task management.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if false; // TODO: Implement admin role check
      allow update: if false; // TODO: Implement admin role check
      allow delete: if false; // TODO: Implement admin role check
    }
  }
}