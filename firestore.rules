/**
 * @fileoverview Firestore Security Rules.
 *
 * Core Philosophy: This ruleset provides a baseline security configuration for the application.
 * It uses a simplified data structure with root-level collections to avoid complex nested rules and permission errors.
 *
 * Data Structure: The Firestore database consists of the following top-level collections:
 * - /employees/{employeeId}: Stores employee data.
 * - /time_entries/{timeEntryId}: Stores time entry records.
 * - /piecework/{pieceworkId}: Stores piecework records.
 * - /clients/{clientId}: Stores client data.
 * - /tasks/{taskId}: Stores task data.
 *
 * Key Security Decisions:
 * - Authenticated users have read access to 'employees', 'clients', and 'tasks'.
 * - Write access to 'employees', 'clients', and 'tasks' is restricted.  A future iteration will apply role-based access.
 * - Authenticated users can manage their own 'time_entries' and 'piecework' records.
 *
 * Denormalization for Authorization: Not explicitly used in this version, but could be implemented to store ownership/access information in documents.
 *
 * Structural Segregation: Not explicitly used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read employee data, but restricts write access.
     * @path /databases/{database}/documents/employees/{employeeId}
     * @allow (get, list) Authenticated user can read employee data.
     * @deny (create, update, delete) Any user cannot create, update, or delete employee data.
     * @principle Restricts write access to employee data.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to manage their own time entry records.
     * @path /databases/{database}/documents/time_entries/{timeEntryId}
     * @allow (create) Authenticated user can create a time entry.
     * @allow (get, list, update, delete) Authenticated user can read, update, or delete their own time entries.
     * @deny (create, update, delete) Authenticated user can not modify time entries they do not own.
     * @principle Enforces ownership for time entry records.
     */
    match /time_entries/{timeEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to manage their own piecework records.
     * @path /databases/{database}/documents/piecework/{pieceworkId}
     * @allow (create) Authenticated user can create a piecework record.
     * @allow (get, list, update, delete) Authenticated user can read, update, or delete their own piecework records.
     * @deny (create, update, delete) Authenticated user can not modify piecework records they do not own.
     * @principle Enforces ownership for piecework records.
     */
    match /piecework/{pieceworkId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows authenticated users to read client data, but restricts write access.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow (get, list) Authenticated user can read client data.
     * @deny (create, update, delete) Any user cannot create, update, or delete client data.
     * @principle Restricts write access to client data.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to read task data, but restricts write access.
     * @path /databases/{database}/documents/tasks/{taskId}
     * @allow (get, list) Authenticated user can read task data.
     * @deny (create, update, delete) Any user cannot create, update, or delete task data.
     * @principle Restricts write access to task data.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // ---------- Helper Functions ----------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}