/**
 * @fileoverview Firestore Security Rules for the Prototype.
 *
 * Core Philosophy:
 * This ruleset provides a flexible starting point for a time tracking application,
 * balancing ease of development with secure data access.  It enforces a basic
 * level of authentication, with more restrictive roles (like 'admin') implied but
 * not yet fully implemented. All `list` operations are permitted.
 *
 * Data Structure:
 * The Firestore database consists of top-level collections for 'clients',
 * 'employees', 'tasks', 'time_entries', and 'piecework'. Each document
 * within these collections is accessed via its unique ID.
 *
 * Key Security Decisions:
 * - All authenticated users can read all data.
 * - Write permissions to `clients`, `employees`, and `tasks` are open, but need to be restricted to `admin` roles.
 * - Write permissions to `time_entries` and `piecework` are open to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to clients. Write access needs to be restricted to admin users.
     * @path /clients/{clientId}
     * @allow (get, list) All authenticated users can read all clients.
     * @deny (create, update, delete) No unauthenticated access.
     * @principle Read is public, write should be restricted to admins.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Restrict to admins
    }

    /**
     * @description Allows read access to employees. Write access needs to be restricted to admin users.
     * @path /employees/{employeeId}
     * @allow (get, list) All authenticated users can read all employees.
     * @deny (create, update, delete) No unauthenticated access.
     * @principle Read is public, write should be restricted to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Restrict to admins
    }

    /**
     * @description Allows read and write access to time_entries for authenticated users.
     * @path /time_entries/{timeEntryId}
     * @allow (get, list, create, update, delete) Any authenticated user.
     * @deny None.
     * @principle Open access for authenticated users.
     */
    match /time_entries/{timeEntryId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to piecework for authenticated users.
     * @path /piecework/{pieceworkId}
     * @allow (get, list, create, update, delete) Any authenticated user.
     * @deny None.
     * @principle Open access for authenticated users.
     */
    match /piecework/{pieceworkId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read access to tasks. Write access needs to be restricted to admin users.
     * @path /tasks/{taskId}
     * @allow (get, list) All authenticated users can read all tasks.
     * @deny (create, update, delete) No unauthenticated access.
     * @principle Read is public, write should be restricted to admins.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Restrict to admins
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}