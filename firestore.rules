/**
 * @fileoverview Firestore Security Rules.
 *
 * Core Philosophy: This ruleset implements role-based access control, with all authenticated users having read access to most data,
 * but with write access restricted to administrators. This allows for a flexible data model during prototyping.
 *
 * Data Structure: The database consists of top-level collections for employees, time entries, piecework, clients, and tasks.
 *
 * Key Security Decisions:
 *  - All authenticated users can read all collections.
 *  - Only admins can create, update, and delete employees, clients and tasks.
 *  - Time entries and piecework can be created by all authenticated users, but not updated or deleted.
 *  - No data validation is enforced, adhering to the prototyping philosophy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows all authenticated users to read employee data, but only admins can create, update, or delete employees.
     * @path /employees/{employeeId}
     * @allow (get, list): Any authenticated user can read employee data.
     * @allow (create, update, delete): Only admins can modify employee data.
     * @deny (create, update, delete): Non-admins cannot modify employee data.
     * @principle Implements role-based access control, restricting write access to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows any authenticated user to create time entries, but restricts updates and deletes.
     * @path /time_entries/{timeEntryId}
     * @allow (get, list): Any authenticated user can read time entry data.
     * @allow (create): Any authenticated user can create time entry data.
     * @deny (update, delete): No one can update or delete time entry data.
     * @principle Allows for data collection from all users while preventing modifications.
     */
    match /time_entries/{timeEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create piecework records, but restricts updates and deletes.
     * @path /piecework/{pieceworkId}
     * @allow (get, list): Any authenticated user can read piecework data.
     * @allow (create): Any authenticated user can create piecework data.
     * @deny (update, delete): No one can update or delete piecework data.
     * @principle Allows for data collection from all users while preventing modifications.
     */
    match /piecework/{pieceworkId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows all authenticated users to read client data, but only admins can create, update, or delete clients.
     * @path /clients/{clientId}
     * @allow (get, list): Any authenticated user can read client data.
     * @allow (create, update, delete): Only admins can modify client data.
     * @deny (create, update, delete): Non-admins cannot modify client data.
     * @principle Implements role-based access control, restricting write access to admins.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows all authenticated users to read task data, but only admins can create, update, or delete tasks.
     * @path /tasks/{taskId}
     * @allow (get, list): Any authenticated user can read task data.
     * @allow (create, update, delete): Only admins can modify task data.
     * @deny (create, update, delete): Non-admins cannot modify task data.
     * @principle Implements role-based access control, restricting write access to admins.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    // TODO: Implement Admin Role - Requires Custom Claims
    function isAdmin() {
       return false;
    }
  }
}