/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control, especially around user-owned data and administrative privileges.
 * It assumes a model where certain collections (e.g., 'employees', 'clients', 'tasks') are primarily managed by
 * administrative users, while others (e.g., 'time_entries', 'piecework') can be created by any authenticated user.
 *
 * Data Structure:
 * - /employees/{employeeId}: Employee records. Admins can create/update/delete, all authenticated users can read.
 * - /time_entries/{timeEntryId}: Time entry records. Any authenticated user can create.
 * - /piecework/{pieceworkId}: Piecework records. Any authenticated user can create.
 * - /clients/{clientId}: Client records. Admins can create/update/delete, all authenticated users can read.
 * - /tasks/{taskId}: Task records. Admins can create/update/delete, all authenticated users can read.
 *
 * Key Security Decisions:
 * - No user listing is allowed unless explicitly specified in a data model description.
 * - Focus on secure writes. Read rules are more permissive where the data model allows.
 * - Authorization decisions rely on the authenticated user's UID (`request.auth.uid`).
 * - Data shape validation is minimized for prototyping but critical authorization fields are validated on writes.
 *
 * Denormalization for Authorization:
 * - No denormalization is used for this ruleset, as it's assumed that admin status is managed externally. If roles
 *   were stored in Firestore, a `get()` call (or denormalization) would be necessary to securely validate admin privileges.
 *
 * Structural Segregation:
 * - No structural segregation is used. All collections are top-level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /employees collection.
     * @path /employees/{employeeId}
     * @allow (create) - An admin user can create a new employee record. (Hypothetical admin role check)
     * @allow (get, list) - Any authenticated user can read employee data.
     * @deny (create) - A non-admin user cannot create an employee record.
     * @deny (update, delete) - A non-admin user cannot update or delete an employee record.
     * @principle Enforces admin-only writes for employee data.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the /time_entries collection.
     * @path /time_entries/{timeEntryId}
     * @allow (create) - Any authenticated user can create a new time entry record.
     * @allow (get, list) - Any authenticated user can read a time entry record.
     * @deny (create) - An unauthenticated user cannot create a time entry record.
     * @deny (update, delete) - Only the creator (or an admin) can update or delete a time entry record.
     * @principle Allows any authenticated user to create time entries.
     */
    match /time_entries/{timeEntryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the /piecework collection.
     * @path /piecework/{pieceworkId}
     * @allow (create) - Any authenticated user can create a new piecework record.
     * @allow (get, list) - Any authenticated user can read a piecework record.
     * @deny (create) - An unauthenticated user cannot create a piecework record.
     * @deny (update, delete) - Only the creator (or an admin) can update or delete a piecework record.
     * @principle Allows any authenticated user to create piecework records.
     */
    match /piecework/{pieceworkId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the /clients collection.
     * @path /clients/{clientId}
     * @allow (create) - An admin user can create a new client record.
     * @allow (get, list) - Any authenticated user can read client data.
     * @deny (create) - A non-admin user cannot create a client record.
     * @deny (update, delete) - A non-admin user cannot update or delete a client record.
     * @principle Enforces admin-only writes for client data.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the /tasks collection.
     * @path /tasks/{taskId}
     * @allow (create) - An admin user can create a new task record.
     * @allow (get, list) - Any authenticated user can read task data.
     * @deny (create) - A non-admin user cannot create a task record.
     * @deny (update, delete) - A non-admin user cannot update or delete a task record.
     * @principle Enforces admin-only writes for task data.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    // Placeholder for admin role check. Replace with your actual admin check logic.
    function isAdmin() {
      return false;
    }
  }
}