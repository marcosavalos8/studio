/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with public read access on some collections,
 *   and admin-restricted write access on key entities.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee data.
 * - /time_entries/{timeEntryId}: Stores time entry records.
 * - /piecework/{pieceworkId}: Stores piecework records.
 * - /clients/{clientId}: Stores client data.
 * - /tasks/{taskId}: Stores task data.
 *
 * Key Security Decisions:
 * - Role-based access control: only admins can write to the employees, clients and tasks collections.
 * - Public read access: time_entries and piecework collections can be read by any logged in user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee data.
     * @path /employees/{employeeId}
     * @allow (create) - Only an admin can create a new employee.
     * @deny (create) - Non-admin users cannot create employees.
     * @allow (get, list) - Any authenticated user can read employee data.
     * @deny (update, delete) - Only an admin can update or delete an employee.
     * @principle Enforces role-based access control; only admins can modify employee data.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages time entry records.
     * @path /time_entries/{timeEntryId}
     * @allow (create) - Any authenticated user can create a time entry.
     * @allow (get, list) - Any authenticated user can read time entries.
     * @deny (update, delete) - Only an admin can update or delete a time entry.
     * @principle Allows all authenticated users to create and read time entries.
     */
    match /time_entries/{timeEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages piecework records.
     * @path /piecework/{pieceworkId}
     * @allow (create) - Any authenticated user can create a piecework record.
     * @allow (get, list) - Any authenticated user can read piecework records.
     * @deny (update, delete) - Only an admin can update or delete a piecework record.
     * @principle Allows all authenticated users to create and read piecework records.
     */
    match /piecework/{pieceworkId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages client data.
     * @path /clients/{clientId}
     * @allow (create) - Only an admin can create a new client.
     * @deny (create) - Non-admin users cannot create clients.
     * @allow (get, list) - Any authenticated user can read client data.
     * @deny (update, delete) - Only an admin can update or delete a client.
     * @principle Enforces role-based access control; only admins can modify client data.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages task data.
     * @path /tasks/{taskId}
     * @allow (create) - Only an admin can create a new task.
     * @deny (create) - Non-admin users cannot create tasks.
     * @allow (get, list) - Any authenticated user can read task data.
     * @deny (update, delete) - Only an admin can update or delete a task.
     * @principle Enforces role-based access control; only admins can modify task data.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- Funciones de Ayuda ---
function isSignedIn() {
  return request.auth != null;
}

function isAdmin() {
  // ðŸŽ¯ ARREGLO: Comprobar el reclamo personalizado 'admin' en el token del usuario.
  // Solo serÃ¡ true si el reclamo fue establecido por un servidor usando el Admin SDK.
  return request.auth != null && request.auth.token.admin == true;
}
  }
}