/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control while allowing for flexible data shapes during prototyping.
 * It focuses on preventing unauthorized data modification and deletion, while allowing any authenticated user to read all data.
 * Write access (create, update, delete) is restricted based on admin privileges (TODO: define the logic in `isAdmin()`).
 *
 * Data Structure:
 * The Firestore database contains collections for employees, time entries, piecework, clients, and tasks.
 *
 * Key Security Decisions:
 * - Any authenticated user can read all data.
 * - Only admins can create, update, and delete clients, tasks, and employees.
 * - Time entries and piecework records can be created, updated and deleted by any authenticated user.
 * - Schema validation is relaxed during prototyping to allow quick iteration, except for checking document existence before updates/deletes and validating ownership on create.
 *
 * Denormalization for Authorization:
 * This ruleset avoids `get()` calls by assuming admin status can be checked externally.
 *
 * Structural Segregation:
 * There is no segregation of public vs. private data; all data is treated as potentially sensitive.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'employees' collection.
     * @path /databases/{database}/documents/employees/{employeeId}
     * @allow (get, list) Any authenticated user can read employee data.
     * @allow (create, update, delete) Only admins can create, update, or delete employee data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete employee data.
     * @principle Requires admin role for write operations.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the 'time_entries' collection.
     * @path /databases/{database}/documents/time_entries/{timeEntryId}
     * @allow (get, list, create, update, delete) Any authenticated user can read, create, update and delete time entry data.
     * @deny (create, update, delete) if not signed in
     * @principle Allows any authenticated user to manage time entries.
     */
    match /time_entries/{timeEntryId} {
      allow get, list, create, update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the 'piecework' collection.
     * @path /databases/{database}/documents/piecework/{pieceworkId}
     * @allow (get, list, create, update, delete) Any authenticated user can read, create, update and delete piecework data.
     * @deny (create, update, delete) if not signed in
     * @principle Allows any authenticated user to manage piecework entries.
     */
    match /piecework/{pieceworkId} {
      allow get, list, create, update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the 'clients' collection.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow (get, list) Any authenticated user can read client data.
     * @allow (create, update, delete) Only admins can create, update, or delete client data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete client data.
     * @principle Requires admin role for write operations.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the 'tasks' collection.
     * @path /databases/{database}/documents/tasks/{taskId}
     * @allow (get, list) Any authenticated user can read task data.
     * @allow (create, update, delete) Only admins can create, update, or delete task data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete task data.
     * @principle Requires admin role for write operations.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    // TODO: Implement the isAdmin() function based on your actual authentication and authorization logic.
    // This is a placeholder. Replace with your actual admin check (e.g., from custom claims).
    function isAdmin() {
      return false;
    }
  }
}