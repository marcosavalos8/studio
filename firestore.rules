rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {bool} True if the user has the admin role, false otherwise.
     */
    function isAdmin() {
      //CRITICAL: The implementation of isAdmin() is not defined in the JSON and defaults to false.
      // In a real application, this would likely involve checking a custom claim
      // or a document in a separate collection.  For prototyping, we'll grant
      // admin access to all signed-in users.
      return isSignedIn();
    }

    /**
     * @description Rules for the /employees/{employeeId} collection.
     * @path /employees/{employeeId}
     * @allow (create) If the user has the 'admin' role.
     * @deny (create) If the user does not have the 'admin' role.
     * @allow (get) If the user has the 'admin' role.
     * @deny (get) If the user does not have the 'admin' role.
     * @allow (update) If the user has the 'admin' role.
     * @deny (update) If the user does not have the 'admin' role.
     * @allow (delete) If the user has the 'admin' role.
     * @deny (delete) If the user does not have the 'admin' role.
     * @principle Restricts employee creation and modification to users with the 'admin' role.
     */
    match /employees/{employeeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/time_entries/{timeEntryId} collection.
     * @path /users/{userId}/time_entries/{timeEntryId}
     * @allow (create) If the user is the owner of the time entry.
     * @deny (create) If the user is not the owner of the time entry.
     * @allow (get) If the user is the owner of the time entry.
     * @deny (get) If the user is not the owner of the time entry.
     * @allow (update) If the user is the owner of the time entry.
     * @deny (update) If the user is not the owner of the time entry.
     * @allow (delete) If the user is the owner of the time entry.
     * @deny (delete) If the user is not the owner of the time entry.
     * @principle Enforces document ownership for time entries.
     */
    match /users/{userId}/time_entries/{timeEntryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Rules for the /users/{userId}/piecework/{pieceworkId} collection.
     * @path /users/{userId}/piecework/{pieceworkId}
     * @allow (create) If the user is the owner of the piecework record.
     * @deny (create) If the user is not the owner of the piecework record.
     * @allow (get) If the user is the owner of the piecework record.
     * @deny (get) If the user is not the owner of the piecework record.
     * @allow (update) If the user is the owner of the piecework record.
     * @deny (update) If the user is not the owner of the piecework record.
     * @allow (delete) If the user is the owner of the piecework record.
     * @deny (delete) If the user is not the owner of the piecework record.
     * @principle Enforces document ownership for piecework records.
     */
    match /users/{userId}/piecework/{pieceworkId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) If the user has the 'admin' role.
     * @deny (create) If the user does not have the 'admin' role.
     * @allow (get) If the user has the 'admin' role.
     * @deny (get) If the user does not have the 'admin' role.
     * @allow (update) If the user has the 'admin' role.
     * @deny (update) If the user does not have the 'admin' role.
     * @allow (delete) If the user has the 'admin' role.
     * @deny (delete) If the user does not have the 'admin' role.
     * @principle Restricts client creation and modification to users with the 'admin' role.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (create) If the user has the 'admin' role.
     * @deny (create) If the user does not have the 'admin' role.
     * @allow (get) If the user has the 'admin' role.
     * @deny (get) If the user does not have the 'admin' role.
     * @allow (update) If the user has the 'admin' role.
     * @deny (update) If the user does not have the 'admin' role.
     * @allow (delete) If the user has the 'admin' role.
     * @deny (delete) If the user does not have the 'admin' role.
     * @principle Restricts task creation and modification to users with the 'admin' role.
     */
    match /tasks/{taskId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}