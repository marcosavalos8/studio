/**
 * @fileoverview Firestore Security Rules for the time-tracking application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * All write operations are protected by authorization checks.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /time_entries/{timeEntryId}: Stores time entries.
 * - /piecework/{pieceworkId}: Stores piecework records.
 * - /clients/{clientId}: Stores client information.
 * - /tasks/{taskId}: Stores task or project details.
 *
 * Key Security Decisions:
 * - All authenticated users can list all data, but writes are restricted.
 * - There is not notion of admin roles.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to time entry records for any authenticated user.
     * @path /time_entries/{timeEntryId}
     * @allow (list) request.auth != null
     * @allow (get) request.auth != null
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Allows any authenticated user to list time entries. Write operations are disabled in this prototype.
     */
    match /time_entries/{timeEntryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read and write access to piecework records for any authenticated user.
     * @path /piecework/{pieceworkId}
     * @allow (list) request.auth != null
     * @allow (get) request.auth != null
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Allows any authenticated user to list piecework records. Write operations are disabled in this prototype.
     */
    match /piecework/{pieceworkId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to employee documents for any authenticated user, but restricts write access.
     * @path /employees/{employeeId}
     * @allow (list) request.auth != null
     * @allow (get) request.auth != null
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Restricts write access to employee profiles in this prototype.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to client documents for any authenticated user, but restricts write access.
     * @path /clients/{clientId}
     * @allow (list) request.auth != null
     * @allow (get) request.auth != null
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Restricts write access to client information in this prototype.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to task documents for any authenticated user, but restricts write access.
     * @path /tasks/{taskId}
     * @allow (list) request.auth != null
     * @allow (get) request.auth != null
     * @deny (create) false
     * @deny (update) false
     * @deny (delete) false
     * @principle Restricts write access to task details in this prototype.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}