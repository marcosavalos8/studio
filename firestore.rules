/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on a combination of
 * pre-defined roles and, where applicable, ownership. The rules are designed
 * to be flexible on data shapes during the prototyping phase but will strictly
 * enforce authorization.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /clients/{clientId}: Stores client information.
 * - /tasks/{taskId}: Stores task/project details.
 * - /timelogs/{timelogId}: Logs time worked by employees.
 * - /piecelogs/{piecelogId}: Logs piecework completed by employees.
 * - /sharedPieceLogs/{logId}: Logs piecework shared by a team.
 *
 * Key Security Decisions:
 * - Anonymous authentication is enabled, meaning some operations might be
 *   allowed for unauthenticated users.
 * - Data validation is minimal to allow for rapid prototyping.  The focus is
 *   on authorization.
 * - Listing of documents is generally disallowed unless explicitly permitted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles. Only allow authenticated users to create or modify
     * @path /employees/{employeeId}
     * @allow (create) - Authenticated user can create employee data
     * @deny (create) - Unauthenticated user attempts to create employee data
     * @allow (get) - Authenticated user can get employee data
     * @deny (get) - Unauthenticated user attempts to get employee data
     * @allow (update) - Authenticated user can update employee data
     * @deny (update) - Unauthenticated user attempts to update employee data
     * @allow (delete) - Authenticated user can delete employee data
     * @deny (delete) - Unauthenticated user attempts to delete employee data
     * @allow (list) - Authenticated user can list employee data
     * @deny (list) - Unauthenticated user attempts to list employee data
     * @principle Authenticated access for all operations.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages client information. Only allow authenticated users to create or modify
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user can create client data
     * @deny (create) - Unauthenticated user attempts to create client data
     * @allow (get) - Authenticated user can get client data
     * @deny (get) - Unauthenticated user attempts to get client data
     * @allow (update) - Authenticated user can update client data
     * @deny (update) - Unauthenticated user attempts to update client data
     * @allow (delete) - Authenticated user can delete client data
     * @deny (delete) - Unauthenticated user attempts to delete client data
     * @allow (list) - Authenticated user can list client data
     * @deny (list) - Unauthenticated user attempts to list client data
     * @principle Authenticated access for all operations.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages tasks/projects. Only allow authenticated users to create or modify
     * @path /tasks/{taskId}
     * @allow (create) - Authenticated user can create task data
     * @deny (create) - Unauthenticated user attempts to create task data
     * @allow (get) - Authenticated user can get task data
     * @deny (get) - Unauthenticated user attempts to get task data
     * @allow (update) - Authenticated user can update task data
     * @deny (update) - Unauthenticated user attempts to update task data
     * @allow (delete) - Authenticated user can delete task data
     * @deny (delete) - Unauthenticated user attempts to delete task data
     * @allow (list) - Authenticated user can list task data
     * @deny (list) - Unauthenticated user attempts to list task data
     * @principle Authenticated access for all operations.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages timelogs. Only allow authenticated users to create or modify
     * @path /timelogs/{timelogId}
     * @allow (create) - Authenticated user can create timelog data
     * @deny (create) - Unauthenticated user attempts to create timelog data
     * @allow (get) - Authenticated user can get timelog data
     * @deny (get) - Unauthenticated user attempts to get timelog data
     * @allow (update) - Authenticated user can update timelog data
     * @deny (update) - Unauthenticated user attempts to update timelog data
     * @allow (delete) - Authenticated user can delete timelog data
     * @deny (delete) - Unauthenticated user attempts to delete timelog data
     * @allow (list) - Authenticated user can list timelog data
     * @deny (list) - Unauthenticated user attempts to list timelog data
     * @principle Authenticated access for all operations.
     */
    match /timelogs/{timelogId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages piecelogs. Only allow authenticated users to create or modify
     * @path /piecelogs/{piecelogId}
     * @allow (create) - Authenticated user can create piecelog data
     * @deny (create) - Unauthenticated user attempts to create piecelog data
     * @allow (get) - Authenticated user can get piecelog data
     * @deny (get) - Unauthenticated user attempts to get piecelog data
     * @allow (update) - Authenticated user can update piecelog data
     * @deny (update) - Unauthenticated user attempts to update piecelog data
     * @allow (delete) - Authenticated user can delete piecelog data
     * @deny (delete) - Unauthenticated user attempts to delete piecelog data
     * @allow (list) - Authenticated user can list piecelog data
     * @deny (list) - Unauthenticated user attempts to list piecelog data
     * @principle Authenticated access for all operations.
     */
    match /piecelogs/{piecelogId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
     * @description Manages shared piecelogs. Only allow authenticated users to create or modify
     * @path /sharedPieceLogs/{logId}
     * @allow (create) - Authenticated user can create shared piecelog data
     * @deny (create) - Unauthenticated user attempts to create shared piecelog data
     * @allow (get) - Authenticated user can get shared piecelog data
     * @deny (get) - Unauthenticated user attempts to get shared piecelog data
     * @allow (update) - Authenticated user can update shared piecelog data
     * @deny (update) - Unauthenticated user attempts to update shared piecelog data
     * @allow (delete) - Authenticated user can delete shared piecelog data
     * @deny (delete) - Unauthenticated user attempts to delete shared piecelog data
     * @allow (list) - Authenticated user can list shared piecelog data
     * @deny (list) - Unauthenticated user attempts to list shared piecelog data
     * @principle Authenticated access for all operations.
     */
    match /sharedPieceLogs/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}