/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control for write operations and allows public read access where specified.
 * All write operations are restricted to authenticated users with admin privileges.
 * Read operations are generally open to all users.
 *
 * Data Structure:
 * The Firestore database consists of top-level collections for 'clients', 'tasks', 'employees', 'time_entries', and 'piecework'.
 * Each document is identified by a unique ID.
 *
 * Key Security Decisions:
 * - Write access to 'clients', 'tasks', and 'employees' collections is restricted to admins only.
 * - Read access to all collections is allowed for all authenticated users.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to the 'clients' collection for all users. Only admins can create, update, or delete clients.
     * @path /clients/{clientId}
     * @allow (get, list)
     * @deny (create) - User with uid "user1" attempts to create a client.
     * @principle Enforces admin-only writes and public reads for clients.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows read access to the 'tasks' collection for all users. Only admins can create, update, or delete tasks.
     * @path /tasks/{taskId}
     * @allow (get, list)
     * @deny (create) - User with uid "user1" attempts to create a task.
     * @principle Enforces admin-only writes and public reads for tasks.
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows read access to the 'employees' collection for all users. Only admins can create, update, or delete employees.
     * @path /employees/{employeeId}
     * @allow (get, list)
     * @deny (create) - User with uid "user1" attempts to create an employee.
     * @principle Enforces admin-only writes and public reads for employees.
     */
    match /employees/{employeeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows read and write access to the 'time_entries' collection for all authenticated users.
     * @path /time_entries/{timeEntryId}
     * @allow (create) - User with uid "user1" creates a new time entry.
     * @allow (get, list)
     * @deny (update) - User attempts to update a non-existent time entry.
     * @principle Allows open access to time entry records for all authenticated users.
     */
    match /time_entries/{timeEntryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to the 'piecework' collection for all authenticated users.
     * @path /piecework/{pieceworkId}
     * @allow (create) - User with uid "user1" creates a new piecework record.
     * @allow (get, list)
     * @deny (update) - User attempts to update a non-existent piecework record.
     * @principle Allows open access to piecework records for all authenticated users.
     */
    match /piecework/{pieceworkId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    // TODO: Implement Admin role check, for now deny all writes
    function isAdmin() {
       return false;
    }
  }
}