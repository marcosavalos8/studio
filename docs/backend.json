{
  "entities": {
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task or project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "name": {
          "type": "string",
          "description": "Name of the task or project."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Task)"
        },
        "ranch": {
          "type": "string",
          "description": "The ranch where the task is performed."
        },
        "block": {
          "type": "string",
          "description": "The specific block within the ranch."
        },
        "clientRate": {
          "type": "number",
          "description": "Client rate for the task (per hour or per piece)."
        },
        "employeePaymentType": {
          "type": "string",
          "description": "Type of payment for the employee (Hourly or Piecework)."
        },
        "employeeRate": {
          "type": "number",
          "description": "Employee rate for the task."
        }
      },
      "required": [
        "id",
        "name",
        "clientId",
        "clientRate",
        "employeePaymentType",
        "employeeRate"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client."
        },
        "name": {
          "type": "string",
          "description": "Name of the client."
        },
        "billingAddress": {
          "type": "string",
          "description": "Billing address of the client."
        },
        "paymentTerms": {
          "type": "string",
          "description": "Payment terms for the client."
        }
      },
      "required": [
        "id",
        "name",
        "billingAddress",
        "paymentTerms"
      ]
    },
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the employee."
        },
        "name": {
          "type": "string",
          "description": "Name of the employee."
        },
        "qrCode": {
          "type": "string",
          "description": "Unique QR code for the employee."
        },
        "role": {
          "type": "string",
          "description": "Role of the employee (Worker or Supervisor)."
        },
        "status": {
          "type": "string",
          "description": "Status of the employee (Active, Inactive)."
        }
      },
      "required": [
        "id",
        "name",
        "qrCode",
        "role",
        "status"
      ]
    },
    "TimeEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TimeEntry",
      "type": "object",
      "description": "Represents a time entry record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the time entry record."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N TimeEntry)"
        },
        "taskId": {
          "type": "string",
          "description": "Reference to Task. (Relationship: Task 1:N TimeEntry)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the time entry.",
          "format": "date-time"
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the time entry location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the time entry location."
        },
        "synchronized": {
          "type": "boolean",
          "description": "Indicates whether the record is synchronized with the server."
        },
        "isBreak": {
          "type": "boolean",
          "description": "Indicates whether the time entry is a break."
        },
        "breakReason": {
          "type": "string",
          "description": "Reason for the break."
        }
      },
      "required": [
        "id",
        "employeeId",
        "taskId",
        "timestamp",
        "latitude",
        "longitude",
        "synchronized",
        "isBreak"
      ]
    },
    "Piecework": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Piecework",
      "type": "object",
      "description": "Represents a piecework record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the piecework record."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N Piecework)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the piecework record.",
          "format": "date-time"
        },
        "pieceCount": {
          "type": "number",
          "description": "Number of pieces recorded."
        },
        "pieceQrCode": {
          "type": "string",
          "description": "QR code of the piece scanned."
        },
        "qcNote": {
          "type": "string",
          "description": "Quality control note for the piecework."
        },
        "synchronized": {
          "type": "boolean",
          "description": "Indicates whether the record is synchronized with the server."
        }
      },
      "required": [
        "id",
        "employeeId",
        "timestamp",
        "pieceCount",
        "pieceQrCode",
        "synchronized"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee data. All authenticated users can read, but only admins can write.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "time_entries/{timeEntryId}",
        "definition": {
          "entityName": "TimeEntry",
          "schema": {
            "$ref": "#/backend/entities/TimeEntry"
          },
          "description": "Stores time entry records. Accessible by any authenticated user.",
          "params": [
            {
              "name": "timeEntryId",
              "description": "The unique identifier for the time entry."
            }
          ]
        }
      },
      {
        "path": "piecework/{pieceworkId}",
        "definition": {
          "entityName": "Piecework",
          "schema": {
            "$ref": "#/backend/entities/Piecework"
          },
          "description": "Stores piecework records. Accessible by any authenticated user.",
          "params": [
            {
              "name": "pieceworkId",
              "description": "The unique identifier for the piecework record."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client data. All authenticated users can read, but only admins can write.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores task data. All authenticated users can read, but only admins can write.",
          "params": [
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is simplified to use root-level collections for 'employees', 'clients', 'tasks', 'time_entries', and 'piecework'. This decision was made to resolve permission errors that arose from a more complex, nested structure. By placing these collections at the root, security rules can be more straightforward. For instance, all authenticated users are granted read access to global data like clients, tasks, and employees, while write access is restricted. For user-generated data like 'time_entries' and 'piecework', any authenticated user can create, read, update, and delete their own records, which is suitable for the current application logic where supervisors and workers manage data through the app interface itself and all users are authenticated, even if anonymously."
  }
}
