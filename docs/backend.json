{
  "entities": {
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task or project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "name": {
          "type": "string",
          "description": "Name of the task or project."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Task)"
        },
        "ranch": {
          "type": "string",
          "description": "The ranch where the task is performed."
        },
        "block": {
          "type": "string",
          "description": "The specific block within the ranch."
        },
        "clientRate": {
          "type": "number",
          "description": "Client rate for the task (per hour or per piece)."
        },
        "employeePaymentType": {
          "type": "string",
          "description": "Type of payment for the employee (Hourly or Piecework)."
        },
        "employeeRate": {
          "type": "number",
          "description": "Employee rate for the task."
        }
      },
      "required": [
        "id",
        "name",
        "clientId",
        "clientRate",
        "employeePaymentType",
        "employeeRate"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client."
        },
        "name": {
          "type": "string",
          "description": "Name of the client."
        },
        "billingAddress": {
          "type": "string",
          "description": "Billing address of the client."
        },
        "paymentTerms": {
          "type": "string",
          "description": "Payment terms for the client."
        }
      },
      "required": [
        "id",
        "name",
        "billingAddress",
        "paymentTerms"
      ]
    },
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the employee."
        },
        "name": {
          "type": "string",
          "description": "Name of the employee."
        },
        "qrCode": {
          "type": "string",
          "description": "Unique QR code for the employee."
        },
        "role": {
          "type": "string",
          "description": "Role of the employee (Worker or Supervisor)."
        },
        "status": {
          "type": "string",
          "description": "Status of the employee (Active, Inactive)."
        }
      },
      "required": [
        "id",
        "name",
        "qrCode",
        "role",
        "status"
      ]
    },
    "TimeEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TimeEntry",
      "type": "object",
      "description": "Represents a time entry record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the time entry record."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N TimeEntry)"
        },
        "taskId": {
          "type": "string",
          "description": "Reference to Task. (Relationship: Task 1:N TimeEntry)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the time entry.",
          "format": "date-time"
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the time entry location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the time entry location."
        },
        "synchronized": {
          "type": "boolean",
          "description": "Indicates whether the record is synchronized with the server."
        },
        "isBreak": {
          "type": "boolean",
          "description": "Indicates whether the time entry is a break."
        },
        "breakReason": {
          "type": "string",
          "description": "Reason for the break."
        }
      },
      "required": [
        "id",
        "employeeId",
        "taskId",
        "timestamp",
        "latitude",
        "longitude",
        "synchronized",
        "isBreak"
      ]
    },
    "Piecework": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Piecework",
      "type": "object",
      "description": "Represents a piecework record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the piecework record."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N Piecework)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the piecework record.",
          "format": "date-time"
        },
        "pieceCount": {
          "type": "number",
          "description": "Number of pieces recorded."
        },
        "pieceQrCode": {
          "type": "string",
          "description": "QR code of the piece scanned."
        },
        "qcNote": {
          "type": "string",
          "description": "Quality control note for the piecework."
        },
        "synchronized": {
          "type": "boolean",
          "description": "Indicates whether the record is synchronized with the server."
        }
      },
      "required": [
        "id",
        "employeeId",
        "timestamp",
        "pieceCount",
        "pieceQrCode",
        "synchronized"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee data. Employee creation and modification is restricted to users with the 'admin' role.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/time_entries/{timeEntryId}",
        "definition": {
          "entityName": "TimeEntry",
          "schema": {
            "$ref": "#/backend/entities/TimeEntry"
          },
          "description": "Stores time entry records for each user. Accessible only by the user or admins.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "timeEntryId",
              "description": "The unique identifier for the time entry."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/piecework/{pieceworkId}",
        "definition": {
          "entityName": "Piecework",
          "schema": {
            "$ref": "#/backend/entities/Piecework"
          },
          "description": "Stores piecework records for each user. Accessible only by the user or admins.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "pieceworkId",
              "description": "The unique identifier for the piecework record."
            }
          ]
        }
      },
      {
        "path": "clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client data. Client creation and modification is restricted to users with the 'admin' role.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores task data. Task creation and modification is restricted to users with the 'admin' role.",
          "params": [
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to address the permission error and adhere to the core design principles, especially Authorization Independence. The structure uses path-based ownership for employee-related data and denormalizes roles where needed to avoid `get()` calls in security rules. It also segregates data based on access requirements. The structure facilitates secure `list` operations, and enforces data invariants.\n\nSpecifically:\n\n*   **/employees/{employeeId}**: Employee data is stored directly, but managed by an admin role, checked in security rules.\n*   **/users/{userId}/time_entries/{timeEntryId}**: Time entries are stored within the user document, allowing for ownership-based security rules, enabling payroll and invoicing use cases.\n*   **/users/{userId}/piecework/{pieceworkId}**: Piecework records are stored within the user document, allowing for ownership-based security rules, enabling payroll and invoicing use cases.\n*   **/clients/{clientId}**: Client data is stored at the root level, as clients are global to the application and assumed to be managed by admin roles. ClientId is referenced in the tasks collection to provide necessary information to the calculation of invoices.\n*   **/tasks/{taskId}**: Tasks are also stored at the root level, as tasks are global to the application and assumed to be managed by admin roles. This arrangement allows tasks to be easily assigned to time entries and piecework records.\n\nThis design prioritizes Authorization Independence. The root `/employees` collection enforces authorization based on the existence of an admin role, which doesn't require a `get()` call. The `/users/{userId}/time_entries` and `/users/{userId}/piecework` collections are secured by ownership of the authenticated user.\n\nThis approach supports the required QAPs because listing operations can be secured efficiently based on roles (for /employees) or user ownership (for /users/{userId}/time_entries and /users/{userId}/piecework)."
  }
}
    